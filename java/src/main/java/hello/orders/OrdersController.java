package hello.orders;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import java.util.*;
import java.util.Date;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.IntStream;

import hello.products.Product;
import hello.products.ProductRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
public class OrdersController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private OrdersRepository ordersRepository;
    @Autowired
    private Order_ProductRepository order_productRepository;
    @Autowired
    private ProductRepository p;
    private static final Logger LOG = LoggerFactory.getLogger(OrdersController.class);


    @RequestMapping(path="/createOrder")
    public @ResponseBody String createOrder(@RequestBody int[] products) {
        Orders o = new Orders();
        o.setDate(new Date());

        ordersRepository.save(o);

        for (Integer x: products) {
            Order_Product order_product = new Order_Product();

            order_product.setProduct( p.findProductByIntegerId(x));
            order_product.setOrder(o);
            order_productRepository.save(order_product);
            LOG.info("new order crated");

        }

        return "Created";
    }

    @GetMapping (path="/allOrders")
    public @ResponseBody Iterable<ViewOrder> getAllOrders() {
        List<ViewOrder> result = new ArrayList<ViewOrder>();

        for (Order_Product order: order_productRepository.findAll()) {

            if(!result.stream().anyMatch(o -> o.id.equals(order.getOrder().getId()))) {
                ViewOrder vieworder = new ViewOrder();
                vieworder.products = new ArrayList<>();
                vieworder.id = order.getOrder().getId();
                vieworder.date = order.getOrder().getDate();

                vieworder.products.add(order.getProduct());
                result.add(vieworder);
            }
            else {
                result.get(order.getOrder().getId() - 1).products.add(order.getProduct());
            }
        }

        return result;
    }
}
